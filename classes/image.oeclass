## Class for creating images.
##
## Combined all of functions the image_* classes to a list of functions run
## before the image is created, and when the image is created.
##
## @var IMAGE_BASENAME Basename of the image.
## @var IMAGE_FULLNAME The fullname of the image.
## @var IMAGE_PREPROCESS_FUNCS A list of all the function run before the image
##      is created.
## @var IMAGE_CREATE_FUNCS The functions run to create the image.

addtask rstage after patch before compile
addtask deploy after install before build

inherit fakeroot

IMAGE_BASENAME ?= "${PN}"
IMAGE_FULLNAME ?= "${IMAGE_BASENAME}-${DATETIME}"

IMAGE_PREPROCESS_FUNCS	?= ""
IMAGE_CREATE_FUNCS	?= ""

SRC_URI = ""

FILES_${PN} = ""

# IMAGE_PREPROCESS_FUNCS could create device nodes, merge crontab
# entries, mdev.conf and ineted.conf files

do_compile[dirs] = "${B} ${IMAGE_DIR}"
do_compile[cleandirs] = "${IMAGE_DIR}"

IMAGE_PURGE_PKGMETADIR ?= "1"

fakeroot do_compile () {
    cd ${RSTAGE_DIR}
    tar -cf - . | tar -xf - -C ${IMAGE_DIR}
    cd ${IMAGE_DIR}
    for func in ${IMAGE_PREPROCESS_FUNCS}; do
        $func
    done
    if [ "${IMAGE_PURGE_PKGMETADIR}" = "1" ] ; then
        rm -rf ${IMAGE_DIR}${pkgmetadir}
    fi
    for func in ${IMAGE_CREATE_FUNCS}; do
        $func
    done
}

do_install () {
    :
}

do_deploy[dirs] = "${IMAGE_DEPLOY_DIR}"
do_deploy() {
    :
}
REBUILD ?= "1"

do_rstage[cleandirs]	= "${RSTAGE_DIR} ${RSTAGE_DIR}.unpack"
do_rstage[dirs]		= "${RSTAGE_DIR}"
do_rstage[recdeptask]	= "RDEPENDS:do_package"

do_rstage[import] = "set_stage"
def do_rstage(d):
    if d.get("RECIPE_TYPE") == "canadian-cross":
        def get_dstdir(cwd, package):
            if package.type == "machine":
                return os.path.join(cwd, package.arch, "sysroot")
            else:
                return cwd
    else:
        def get_dstdir(cwd, package):
            return cwd
    retval = set_stage(d, "__rstage", "RSTAGE_FIXUP_FUNCS", get_dstdir,
                       d.get("RSTAGE_DIR") + ".unpack")
    metadir = d.getVar("metadir", True).lstrip("/")
    if os.path.exists(metadir):
        shutil.rmtree(metadir)
    return retval

set_stage[emit] += "do_rstage"

RSTAGE_FIXUP_FUNCS ?= ""

do_deploy[nostamp] = "1"
# Local Variables:
# mode: python
# End:
