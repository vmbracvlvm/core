## Class for packages depending on recipes having binconfig files.
##
## Rewrites the paths in the binconfig files so that it contains valid dirs.

require conf/meta.conf

STAGE_FIXUP_FUNCS += "binconfig_stage_fixup"

BINCONFIG_STAGE_DIRNAMES = "prefix exec_prefix bindir sbindir libdir \
	includedir libexecdir datarootdir datadir sysconfdir sharedstatedir \
	localstatedir infodir mandir"

# FIXME: add a method for packages providing binconfig files to specify which
# dirnames to fixup, so that fx. this installbuilddir could be provided by apr
# recipe, so that it does not impact metadata, and thus signature of all
# recipes.
BINCONFIG_STAGE_DIRNAMES += "installbuilddir"

def binconfig_stage_fixup(d):
    pkgmetadir = d.get("pkgmetadir").lstrip("/")
    metafile_path = os.path.join(pkgmetadir, "binconfig").lstrip("/")
    if not os.path.exists(metafile_path):
        return
    with open(metafile_path, "r") as metafile:
        import string
        binconfig_files = map(string.strip, metafile.readlines())
    stage_dir = os.path.realpath(d.get("STAGE_DIR"))
    pkg_type = d.get("STAGE_FIXUP_PKG_TYPE")
    sysroot = os.path.join(stage_dir, pkg_type)
    if pkg_type in ("native", "cross", "sdk-cross"):
        dirname_prefix = "stage_"
    elif pkg_type in ("sdk", "canadian-cross"):
        dirname_prefix = "sdk_"
    else:
        dirname_prefix = "machine_"
    dirnames = d.get("BINCONFIG_STAGE_DIRNAMES").split()
    dirpaths = {}
    for dirname in dirnames:
        dirpaths[dirname] = d.get(dirname_prefix + dirname)
    for filename in binconfig_files:
        print "fixing up binconfig file", filename
        filename = filename.lstrip("/")
        with open(filename, "r") as input_file:
            binconfig_file = input_file.read()
        for dirname in dirnames:
            if dirpaths[dirname] is None:
                binconfig_file = re.sub(
                    re.compile('^(%s=)"?([^"]*)"?'%(dirname), re.MULTILINE),
                    r"\g<1>%s\g<2>"%(sysroot),
                    binconfig_file)
            else:
                binconfig_file = re.sub(
                    re.compile("^(%s=).*"%(dirname), re.MULTILINE),
                    r"\g<1>%s%s"%(sysroot, dirpaths[dirname]),
                    binconfig_file)
        for flagvar in ("CPPFLAGS", "CFLAGS", "CXXFLAGS", "LDFLAGS"):
            binconfig_file = re.sub(
                 re.compile("^(%s=[\"'])"%(flagvar), re.MULTILINE),
                 r"\g<1>--sysroot=%s "%(sysroot),
                 binconfig_file)
        for option in ("-isystem ", "-I", "-iquote"):
            binconfig_file = re.sub(
                re.compile("(%s)(%s)"%(option, dirpaths["includedir"]),
                           re.MULTILINE),
                r"\g<1>%s\g<2>"%(sysroot),
                binconfig_file)
        for option in ("-L",):
            foobar1 = binconfig_file
            binconfig_file = re.sub(
                re.compile("(%s)(%s)"%(option, dirpaths["libdir"]),
                           re.MULTILINE),
                r"\g<1>%s\g<2>"%(sysroot),
                binconfig_file)
        with open(filename, "w") as output_file:
            output_file.write(binconfig_file)
        if pkg_type in ("machine", "sdk"):
            if pkg_type == "sdk":
                cross_type = "sdk-cross"
            else:
                cross_type = "cross"
            srcfile = os.path.join(sysroot, filename)
            dstlink = os.path.join(
                stage_dir, cross_type, d.get("stage_bindir").lstrip("/"),
                os.path.basename(filename))
            dstdir = os.path.dirname(dstlink)
            print("creating destination dir: {}".format(dstdir))
            oelite.util.makedirs(dstdir)
            print "symlinking %s to %s"%(dstlink, srcfile)
            os.symlink(srcfile, dstlink)

# Local Variables:
# mode: python
# End:
